/*===== Типы данных =====*/
/*
В TypeScript имеются следующие базовые типы:

    boolean : логическое значение true или false
    number : числовое значение
    string : строки
    Array : массивы
    кортежи
    Enum : перечисления
    Any : произвольный тип
    Symbol
    null и undefined : соответствуют значениям null и undefined в javascript
    Never : также представляет отсутствие значения и используется в качестве
    возвращаемого типа функций, которые генерируют или возвращают ошибку. (Используется
        в 2 случаях: функция возвращает ошибку и никогда не завершает свое выполнение,
        либо постоянно что-либо делает)
*/
//Типы мы указываем через : и перед присвоением
/*===== Boolean =====*/
var isFetching = true;
var isLoading = false;
/*===== Number =====*/
var int = 45;
var float = 4.2;
var num = 3e10;
/*===== String =====*/
var message = "Hello world!";
/*===== Array =====*/
//Массив чисел 1 вариант записи
var numberArray1 = [0, 1, 1, 2, 3, 5, 8];
//Массив чисел 2 вариант записи. Дженерик тип
var numberArray2 = [0, 1, 1, 2, 3, 5, 8];
//Массив из строк
var words = ["orange", "yellow", "white"];
//Массив из массивов
var someArray4 = [[1, 2, 3], []];
//Tuple (массив, состоящий из разных типов данных)
//дает возможность объявить массив с известным фиксированным количеством элементов, которые не обязаны быть одного типа
var person = ["Vladislav", 1990];
/*===== Any(описывает данные, тип которых может быть неизвестен на момент написания приложения) =====*/
var variable = 42;
var someArray = [24, "Tom", false];
/*Работа с функциями. Через двоеточие перед {} указываем возвращаемый функцией
тип данных (void ничего не возвращает)*/
function sayMyName(name) {
    console.log(name);
}
sayMyName("Vladislav");
/*===== Never =====*/
function throwError(message) {
    //Тип never будет обработан, если компилятор видит, что будет явно выброшена ошибка
    throw new Error(message);
}
;
function infinite() {
    //Бесконечный цикл
    while (true) { }
}
var login = "admin";
var id1 = 123;
var id2 = "Hero";
